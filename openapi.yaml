openapi: 3.0.3
info:
  title: Task API
  version: 1.0.0
  description: API documentation for the Task Manager application

servers:
  - url: http://localhost:8011/api
    description: Local development server

paths:
  /register:
    post:
      summary: User registration
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                password_confirmation:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation errors

  /login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login returns auth token and user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Bearer token for authorization
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth-user:
    get:
      summary: Get authenticated user info
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /tasks:
    get:
      summary: Get a list of tasks
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: query
          name: filters[title]
          schema: { type: string }
        - in: query
          name: filters[description]
          schema: { type: string }
        - in: query
          name: filters[priority]
          schema:
            type: integer
            enum: [1,2,3,4,5]
        - in: query
          name: filters[status]
          schema:
            type: string
            enum: [todo, done]
        - in: query
          name: sort[]
          schema:
            type: array
            items:
              type: array
              items:
                type: string
          style: form
          explode: true
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      summary: Create a new task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get a single task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: The requested task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      summary: Update a task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    delete:
      summary: Delete a task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Task deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        parent_id: { type: integer, nullable: true }
        title: { type: string }
        description: { type: string }
        status:
          type: string
          enum: [todo, done]
        priority:
          type: integer
          enum: [1,2,3,4,5]
        due_date: { type: string, format: date-time, nullable: true }
        completed_at: { type: string, format: date-time, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    TaskCreate:
      type: object
      required: [user_id, title, description]
      properties:
        user_id: { type: integer }
        parent_id: { type: integer, nullable: true }
        title: { type: string }
        description: { type: string }
        status:
          type: string
          enum: [todo, done]
        priority:
          type: integer
          enum: [1,2,3,4,5]

    TaskUpdate:
      type: object
      properties:
        parent_id: { type: integer, nullable: true }
        title: { type: string }
        description: { type: string }
        priority:
          type: integer
          enum: [1,2,3,4,5]
