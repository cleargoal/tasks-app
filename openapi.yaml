openapi: 3.0.3
info:
  title: Task API
  version: 1.0.0
  description: API documentation for the Task Manager application

servers:
  - url: http://localhost:8011/api
    description: Local development server

paths:
  /register:
    post:
      summary: User registration
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                password_confirmation:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation errors

  /login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login returns auth token and user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Bearer token for authorization
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /me:
    get:
      summary: Get authenticated user info
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /tasks:
    get:
      summary: Get a list of tasks
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: query
          name: filters[title]
          schema:
            type: string
          description: |
            Filter tasks by title (partial match)
            Example with spaces: `filters[title]="My Project"`
            Note: Values containing spaces or special characters must be URL-encoded
        - in: query
          name: filters[description]
          schema:
            type: string
          description: |
            Filter tasks by description (partial match)
            Example with spaces: `filters[description]="urgent task"`
            Note: Values containing spaces or special characters must be URL-encoded
        - in: query
          name: filters[priority]
          schema:
            type: integer
            enum: [1,2,3,4,5]
          description: |
            Filter tasks by priority level:
            - 1: Highest
            - 2: High
            - 3: Medium
            - 4: Low
            - 5: Lowest

            Example: `filters[priority]=1`
        - in: query
          name: filters[status]
          schema:
            type: string
            enum: [todo, done]
          description: |
            Filter tasks by status
            Example: `filters[status]="todo"`
        - in: query
          name: filters[due_date]
          schema:
            type: string
            format: date
          description: |
            Filter tasks by due date in YYYY-MM-DD format
            Example: `filters[due_date]="2025-12-31"`
        - in: query
          name: filters[completed_at]
          schema:
            type: string
            format: date
          description: |
            Filter tasks by completion date in YYYY-MM-DD format
            Example: `filters[completed_at]="2025-06-22"`
            Note: Only tasks with status "done" will have a completed_at value
        - in: query
          name: sort
          description: |
            Sort tasks by specified fields. Format: `sort=field:direction`

            Available fields:
            - created_at
            - title
            - priority
            - due_date
            - status
            - completed_at

            Direction options:
            - asc (ascending)
            - desc (descending)

            Examples:
            - Single field sort: `sort=title:asc`
            - Multiple fields sort: `sort=priority:asc,due_date:desc`

            Note: The `sort=` prefix is required in the query parameter.
          schema:
            type: string
          style: form
          example: "sort=title:asc,priority:desc"
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      summary: Create a new task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
            example:
              parent_id: "0 for main tier (optional)"
              title: "string (require)"
              description: "string (optional)"
              status: "todo (optional, default is 'todo')"
              priority: "1 (optional, default is  5, 'low')"
              due_date: ""
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get a single task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: The requested task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    put:
      summary: Update a task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: |
          **Available fields (optional):**

          | Field        | Type      | Example                |
          |--------------|-----------|------------------------|
          | parent_id    | integer   | 17                     |
          | title        | string    | "Updated task title"   |
          | description  | string    | "Updated description"  |
          | priority     | integer   | 3                      |
          | due_date     | string    | "2025-12-31"           |

          You can include any combination of these fields in the request body.
          For example: `{ "title": "New title" }` will only update the title.
          Keep in mind to double quote keys and values.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
            example: {}
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '403':
          description: Not authorized to update this task

    delete:
      summary: Delete a task
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204':
          description: Task deleted

  /tasks/{id}/complete:
    post:
      summary: Mark task as completed
      security:
        - bearerAuth: []
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task marked as completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '403':
          description: Not authorized to complete this task

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskCreate:
      type: object
      required: [title]
      properties:
        parent_id:
          type: integer
          nullable: true
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, done]
        priority:
          type: integer
          enum: [1,2,3,4,5]
        due_date:
          type: string
          format: date
          nullable: true
          description: Due date for the task in YYYY-MM-DD format (must be today or later)

    TaskUpdate:
      type: object
      properties:
        parent_id:
          type: integer
          nullable: true
        title:
          type: string
        description:
          type: string
        priority:
          type: integer
          enum: [1, 2, 3, 4, 5]
        due_date:
          type: string
          format: date
          nullable: true
          description: Due date for the task in YYYY-MM-DD format

    Task:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        parent_id: { type: integer, nullable: true }
        title: { type: string }
        description: { type: string }
        status:
          type: string
          enum: [todo, done]
        priority:
          type: integer
          enum: [1,2,3,4,5]
        due_date:
          type: string
          format: date
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
